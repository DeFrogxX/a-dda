#summary How to add code for a new predefined shape.

All places in the code, where something should be added, are commented. These comments start with `TO ADD NEW SHAPE` and contain detailed description; the text below is less detailed. Added code should be analogous to shapes already present. The procedure is the following:
 * Add new shape descriptor in the file [http://a-dda.googlecode.com/svn/trunk/src/const.h const.h]. Starting descriptor name with `SH_` is recommended, as well as adding a descriptive comment.
 * Add information about the new shape in the file [http://a-dda.googlecode.com/svn/trunk/src/param.c param.c]. It should be a new row in the constant array `shape_opt`. This line should contain: the shape name (it will be used in a command line), usage string (the description of possible input parameters), help string (it will be shown when `-h` option is used), possible number of parameters (real values), shape descriptor. If this shape can accept variable number of parameters use `UNDEF` instead of a number and then check the number of parameters explicitly in function `PARSE_FUNC(shape)` (below in the same file). If shape accepts a single parameter with a file name, use `FNAME_ARG` instead.
 * Add initialization of the new shape in `else if` sequence in function `InitShape` in file [http://a-dda.googlecode.com/svn/trunk/src/make_particle.c make_particle.c] (in alphabetical order). This initialization should save all parameters from the array `sh_pars` to local variables, which should be defined in the beginning of the file (the place for that is shown by a comment). Then test all input parameters for consistency (for that you are encouraged to use functions from [http://a-dda.googlecode.com/svn/trunk/src/param.h param.h] since they would automatically produce informative output in case of error). If the shape breaks any symmetry, corresponding variables should be set to false. Currently only two symmetries are relevant, however it is recommended to consider all of them (see the comments in the code) for future compatibility. Then initialize the following variables: 1) `sh_form_str` – descriptive string that would be shown in the `log`; 2) either `yx_ratio` (_D,,y,,_/_D,,x,,_) or `n_boxY` (_n,,y,,_); 3) either `zx_ratio` (_D,,z,,_/_D,,x,,_) or `n_boxZ` (_n,,z,,_); 3) `Nmat_need` – number of different domains in this shape; 4) `volume_ratio` – ratio of particle volume (in units of dipoles) to _n,,x,,_^3^, it is used for dpl correction; 5) `n_sizeX` – absolute size of the particle, defined by shape (only when relevant); 6) all other auxiliary variables that are used in shape generation (below). If you do not initialize `yx_ratio` and/or `zx_ratio` set it explicitly to `UNDEF`. If you need temporary local variables (which are used only in this part of the code), either use `tmp1` – `tmp3` or define your own (with more informative names) in the beginning of `InitShape` function. Also (rarely) if the shape defines dimension of the computational grid or absolute size of the particle, correct values of `box_det_sh` and `size_det_sh` in the same location.
 * Add definition of the new shape in `else if` sequence in function `MakeParticle` in file [http://a-dda.googlecode.com/svn/trunk/src/make_particle.c make_particle.c] (in alphabetical order). This definition should set the variable `mat` – index of domain – for each point, specified by (`xr`,`yr`,`zr`) – coordinates divided by _D,,x,,_. Do not set `mat` for void dipoles. If you need temporary local variables (which are used only in this part of the code), either use `tmp1` – `tmp3` or define your own (with more informative names) in the beginning of `MakeParticle` function.

Please refer to section "Defining a Scatterer" of the [http://a-dda.googlecode.com/svn/trunk/doc/manual.pdf manual] for description of the above-mentioned variables and for general overview of how the particle shape is treated inside *ADDA*.

If you add a new predefined shape to *ADDA* according to the described procedure, please write to the [http://groups.google.com/group/adda-discuss discussion group], so your code can be incorporated in future releases.