#summary Brief overview of installation of MPI software.

<wiki:toc /> 

If you plan to run *ADDA* on a cluster, MPI is probably already installed on your system. You should consult someone familiar with the particular MPI package. <b>ADDA</b>â€™s usage of MPI is based on the [http://www.mpi-forum.org MPI 1.2] standard,  and it should work with any implementation that is compliant with this or higher versions of the standard. Version of MPI standard is checked for conformity by *ADDA* both during compilation and at runtime.

If you plan to run a parallel version of *ADDA* on a single computer, e.g. using multicore processor, you need first to install some implementation of MPI. Installation instruction can be found in the manual of a particular MPI package. In the following we briefly describe an example of installation of [http://www.mcs.anl.gov/research/projects/mpich2/ MPICH2] on Unix and Windows. MPICH2 has a lot of advanced features, like combining several single- and multi-core computers in a cluster. However, we do not discuss it here.

=Unix=
In many popular Unix distibutions, MPICH2 can be installed through the package manager - see [http://www.mcs.anl.gov/research/projects/mpich2/downloads/index.php?s=downloads the full list].

A detailed description for compiling MPICH2 yourself are given in its [http://www.mcs.anl.gov/research/projects/mpich2/documentation/index.php?s=docs Installer's Guide], see especially Section 2.2 "From A Standing Start to Running an MPI Program". Below we summarize the most important points.
 * [http://www.mcs.anl.gov/research/projects/mpich2/downloads/index.php?s=downloads Download the source code] of MPICH2 and unzip it.
 * If you are installing MPI under a user account, choose installation directory and create it, for instance:
{{{
mkdir $HOME/mpich2-install
}}}
 * Cd into the directory with MPICH2 source (which we here use also as a build directory) and type
{{{ 
configure -prefix=$HOME/mpich2-install -enable-fast
}}}
 where `-prefix` specifies installation directory, and `-enable-fast` is recommended for production runs (at expense of some error reporting). Other useful configuration options to consider can be found in the [http://www.mcs.anl.gov/research/projects/mpich2/documentation/index.php?s=docs Installer's Guide].
 * Type
{{{
make
make install
}}}
 * Add corresponding `bin` directory to the `$PATH`. For example, if you are using BASH, add
{{{
export PATH=$HOME/mpich2-install/bin:$PATH
}}}
 to your `.bashrc` and relogin. Now you should be able to [CompilingADDA compile MPI-version of ADDA] using `mpicc` (automatically detected by the `Makefile`) and run it using `mpiexec`.

=Windows=
At time of writing (May 2011) the stable version of MPICH2 is 1.3.2p1. However, it has a [http://trac.mcs.anl.gov/projects/mpich2/ticket/1461 critical bug] in its Windows installer. Therefore, use at least version 1.3.3rc1 instead.  MPICH2 [http://www.mcs.anl.gov/research/projects/mpich2/documentation/index.php?s=docs Installer's Guide] contains instructions for Windows - Section 9 "Windows Version". However, they seem somewhat incomplete in comparison with the following practical guide.
 * [http://www.mcs.anl.gov/research/projects/mpich2/downloads/index.php?s=downloads Download the installer] of MPICH2 for your combination of Windows and hardware and install it.
 * Add `bin` subdirectory to Windows environmental variable `PATH`. This will give you direct access to `mpiexec` and `smpd`.
 * On some systems (e.g. Vista) you may need to manually install `smpd` as a system service. For that open Windows console (`cmd`) with administrator's privileges (e.g. right-clicking on its icon and choosing corresponding option). Then run
{{{
smpd -install -phrase behappy
}}}
 The (pass)phrase should be the same for all computers running in a cluster. Specifying it at this moment will stop `mpiexec` from asking for it at every run.
 * First time you run `mpiexec` you probably will be prompted by the Windows firewall, whether to allow `mpiexec` and `smpd` to access network. If you plan to run *ADDA* only on a single PC, you may block them. Otherwise, you should unblock them. You may also get similar prompts for the parallel program itself, e.g., `adda_mpi`.

The above actions are necessary to use precompiled `adda_mpi`, included in [http://code.google.com/p/a-dda/wiki/PackageDescription#Windows_32-bit_executables Win32 package]. If you want to compile MPI version of *ADDA* yourself, then additionally
 * Either 
   * specify paths to `include` and `lib` subdirectories of MPICH2 directory in file `src/mpi/Makefile`, as described in [CompilingADDA].
   * or copy contents of these folders to corresponding `include` and `lib` folders of the [InstallingMinGW#Advanced_options MinGW/MSYS environment]. 
 This is required since Windows package of MPICH2 does not contain compiler wrapper `mpicc`,

*ADDA* will run on any hardware compatible with MPI, but, in principle, it may run more efficiently on hardware with shared memory address space, e.g. multi-core PCs. However, such hardware also has its drawbacks, e.g. the performance may be limited by memory access speed. A few tests performed on different computers showed that currently using two cores of a dual-core PC results in computational time from 60% to 75% of that for sequential execution on the same machine. We plan to optimize *ADDA* specifically for such hardware, using e.g. [http://www.openmp.org/ OpenMP].